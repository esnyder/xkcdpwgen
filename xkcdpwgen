#!/usr/bin/env python

import random, math

def normalform(w):
    w = w.strip()
    return w.split("'")[0].lower()

def readwords(fname):
    return open(fname, "r").readlines()

def makebylen():
    bylen = dict()
    for w in readwords("/usr/share/dict/american-english"):
        w = normalform(w)
        l = len(w)
        if not bylen.has_key(l):
            bylen[l] = dict()
        bylen[l][w] = 1
    return bylen

def password(words, nwords, maxwordlen):
    reslist = list()
    fmtstr = "%%-%ds" % maxwordlen
    while len(reslist) < nwords:
        reslist.append(fmtstr % random.sample(words, 1)[0])
    return ' '.join(reslist)

def bits(n):
    bits = 0
    while n > 1:
        n = n/2
        bits += 1
    return bits

def passwords(bylen, bitsentropy, count):
    result = list()
    words = list()

    maxwordlen = 11
    for wordlen in xrange(3, maxwordlen+1):
        words.extend(bylen[wordlen].keys())
    wordbits = bits(len(words))
    nwords = math.ceil(float(bitsentropy) / float(wordbits))
    print "Final wordlist contains", len(words), "words.  Picking", nwords, "words provides at least", wordbits*nwords, "bits of entropy."
    for x in xrange(0, count):
        result.append(password(words, nwords, maxwordlen))
    return result


if __name__ == "__main__":
    from optparse import OptionParser
    usage = """usage: %prog [options] arg1 arg2

See http://xkcd.com/936/

Basic argument is that picking 4 random common words for a password 
gives you about 44 bits of entropy, vs, say 28 bits of entropy for 
a "strong" (but patterned to be kinda memorable) random password.

xkcdpwgen uses a dictionary to generate a list of words in "normal" form, 
and generate candidate passwords as a few random dictionary words in a row.
Given the length of the word list that we're drawing from, we can then
pick enough words to satisfy given strenght criteria.

It defaults to 44 bits of entropy as per the cartoon.
"""
    parser = OptionParser(usage=usage)    

    parser.add_option("-b", "--bitsentropy", type="int", dest="bitsentropy", 
                      help="generate passwords with at least NUM bits of entropy", 
                      metavar="NUM", default=44)
    #parser.add_option("-e", "--equivalent", dest="equivalent", type="int",
    #                  help="generate passwords as strong as a string of LEN random printable ascii symbols", metavar="LEN")
    parser.add_option("-n", "--num", dest="numtogen", type="int",
                      help="number of candidate passwords to generate", 
                      metavar="NUM", default=20)

    (options, args) = parser.parse_args()

    bl = makebylen()
    for pw in passwords(bl, options.bitsentropy, options.numtogen):
        print pw


